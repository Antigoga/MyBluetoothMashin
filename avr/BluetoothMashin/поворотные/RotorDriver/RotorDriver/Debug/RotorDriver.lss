
RotorDriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00800062  00800062  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ef  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005be  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e9  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fd  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051a  00000000  00000000  00001e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000236f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	39 c0       	rjmp	.+114    	; 0x8a <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ed       	ldi	r30, 0xD6	; 214
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3c       	cpi	r26, 0xC9	; 201
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6d d0       	rcall	.+218    	; 0x134 <main>
  5a:	bb c1       	rjmp	.+886    	; 0x3d2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z8port_iniv>:
// когда bufFirst = bufLast буфер пустой

//НАЧАЛЬНАЯ ИНИЦИАЛИЗАЦИЯ ПОРТОВ УПРАВЛЕНИЯ МОТОРАМИ И СЕРВОПРИВОДОМ
void port_ini()
{
	PORTB = 0x00;
  5e:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00000011;//назначаем пин OCR1A (16bit PWM) на выход
  60:	83 e0       	ldi	r24, 0x03	; 3
  62:	87 bb       	out	0x17, r24	; 23
	
	PORTC = 0b00111100;//зажигаем ходовые оги и задние габариты
  64:	8c e3       	ldi	r24, 0x3C	; 60
  66:	85 bb       	out	0x15, r24	; 21
	DDRC = 0b00111111;
  68:	8f e3       	ldi	r24, 0x3F	; 63
  6a:	84 bb       	out	0x14, r24	; 20
	
	PORTD = 0b00000000;//Дубляж назад поворотников
  6c:	12 ba       	out	0x12, r1	; 18
    DDRD =  0b11000000;
  6e:	80 ec       	ldi	r24, 0xC0	; 192
  70:	81 bb       	out	0x11, r24	; 17
	
	//с PORTB0 идёт наш ШИМ для сервы, с PORTB1 идёт включение и выключение драйвера L293D
	
	for(int i_init=0;  i_init<bufSize; i_init++)//начальная инициализация
  72:	80 e0       	ldi	r24, 0x00	; 0
  74:	90 e0       	ldi	r25, 0x00	; 0
	{
		bufer[i_init]=99;
  76:	23 e6       	ldi	r18, 0x63	; 99
  78:	fc 01       	movw	r30, r24
  7a:	eb 59       	subi	r30, 0x9B	; 155
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	20 83       	st	Z, r18
	PORTD = 0b00000000;//Дубляж назад поворотников
    DDRD =  0b11000000;
	
	//с PORTB0 идёт наш ШИМ для сервы, с PORTB1 идёт включение и выключение драйвера L293D
	
	for(int i_init=0;  i_init<bufSize; i_init++)//начальная инициализация
  80:	01 96       	adiw	r24, 0x01	; 1
  82:	84 36       	cpi	r24, 0x64	; 100
  84:	91 05       	cpc	r25, r1
  86:	c1 f7       	brne	.-16     	; 0x78 <_Z8port_iniv+0x1a>
	{
		bufer[i_init]=99;
	}
}
  88:	08 95       	ret

0000008a <__vector_11>:

//ОБРАБОТЧИК ПРЕРЫВАНИЯ
ISR(USART_RXC_vect)
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	2f 93       	push	r18
  96:	3f 93       	push	r19
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	if(((bufLast + 1)%bufSize) != bufFirst){// защита от переполнени¤
  aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <bufLast>
  ae:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <bufFirst>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	64 e6       	ldi	r22, 0x64	; 100
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	64 d1       	rcall	.+712    	; 0x384 <__divmodhi4>
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	82 17       	cp	r24, r18
  c0:	93 07       	cpc	r25, r19
  c2:	81 f0       	breq	.+32     	; 0xe4 <__vector_11+0x5a>
		bufer[bufLast] = UDR;
  c4:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <bufLast>
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	eb 59       	subi	r30, 0x9B	; 155
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	80 83       	st	Z, r24
		bufLast = (bufLast + 1)%bufSize;
  d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <bufLast>
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	64 e6       	ldi	r22, 0x64	; 100
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	52 d1       	rcall	.+676    	; 0x384 <__divmodhi4>
  e0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <bufLast>
	}
}
  e4:	ff 91       	pop	r31
  e6:	ef 91       	pop	r30
  e8:	bf 91       	pop	r27
  ea:	af 91       	pop	r26
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	7f 91       	pop	r23
  f2:	6f 91       	pop	r22
  f4:	5f 91       	pop	r21
  f6:	3f 91       	pop	r19
  f8:	2f 91       	pop	r18
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_Z8InitUARTv>:

//ИНИЦИАЛИЗАЦИЯ UART
void InitUART(void)
{
	UCSRB = 0b00011000;
 104:	88 e1       	ldi	r24, 0x18	; 24
 106:	8a b9       	out	0x0a, r24	; 10
	UCSRB |=(1<<RXCIE);
 108:	57 9a       	sbi	0x0a, 7	; 10
	UCSRC = 0b10000011;
 10a:	83 e8       	ldi	r24, 0x83	; 131
 10c:	80 bd       	out	0x20, r24	; 32
	UBRRH=(BAUD_PRESCALE>>8);
 10e:	10 bc       	out	0x20, r1	; 32
	UBRRL=BAUD_PRESCALE;
 110:	8c e0       	ldi	r24, 0x0C	; 12
 112:	89 b9       	out	0x09, r24	; 9
 114:	08 95       	ret

00000116 <_Z14init_PWM_timerv>:
}

//ИНИЦИАЛИЗАЦИЯ ТАЙМЕРА
void init_PWM_timer()
{
	TCCR1A |= (1 << COM1A1) | (1 << WGM11)|(1 << COM1B1) ;//не инвертируем ШИМ
 116:	8f b5       	in	r24, 0x2f	; 47
 118:	82 6a       	ori	r24, 0xA2	; 162
 11a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS11) | (1 << CS10);//делитель частоты = 64; режим = 14(быстрый ШИМ)
 11c:	8e b5       	in	r24, 0x2e	; 46
 11e:	8b 61       	ori	r24, 0x1B	; 27
 120:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0x00;
 122:	1d bc       	out	0x2d, r1	; 45
 124:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;//частота ШИМ = 50Hz; Период = 20ms (период стандартный)
 126:	83 ec       	ldi	r24, 0xC3	; 195
 128:	99 e0       	ldi	r25, 0x09	; 9
 12a:	97 bd       	out	0x27, r25	; 39
 12c:	86 bd       	out	0x26, r24	; 38
	OCR1A = 0x00;
 12e:	1b bc       	out	0x2b, r1	; 43
 130:	1a bc       	out	0x2a, r1	; 42
 132:	08 95       	ret

00000134 <main>:
// Главная программа
//------------------------------------------------------------------------------
int main(void)
{
	//Функции начальной инициализации
	port_ini();
 134:	94 df       	rcall	.-216    	; 0x5e <_Z8port_iniv>
	InitUART();
 136:	e6 df       	rcall	.-52     	; 0x104 <_Z8InitUARTv>
	init_PWM_timer();
 138:	ee df       	rcall	.-36     	; 0x116 <_Z14init_PWM_timerv>
	
	//При включении устанавливаем колёса машины по направлению движения (ровно)
	PORTB |=(1<<0);//включаем серву
 13a:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	2f e7       	ldi	r18, 0x7F	; 127
 13e:	48 e3       	ldi	r20, 0x38	; 56
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	21 50       	subi	r18, 0x01	; 1
 144:	40 40       	sbci	r20, 0x00	; 0
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xe>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x18>
 14c:	00 00       	nop
	_delay_ms(50);// ждём, пока пройдёт скачок
	OCR1A=188; //127 ~ 0*: 188 ~ 90* : 236 ~ 180* - карта значений при делители ШИМ = 64
 14e:	8c eb       	ldi	r24, 0xBC	; 188
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9b bd       	out	0x2b, r25	; 43
 154:	8a bd       	out	0x2a, r24	; 42
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	29 e6       	ldi	r18, 0x69	; 105
 15a:	48 e1       	ldi	r20, 0x18	; 24
 15c:	91 50       	subi	r25, 0x01	; 1
 15e:	20 40       	sbci	r18, 0x00	; 0
 160:	40 40       	sbci	r20, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x28>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x32>
 166:	00 00       	nop
	_delay_ms(1000);// докрутка и ориентирование по центру
	PORTB &=(0<<0);//выключаем серу
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	18 ba       	out	0x18, r1	; 24
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	98 e3       	ldi	r25, 0x38	; 56
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	81 50       	subi	r24, 0x01	; 1
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	20 40       	sbci	r18, 0x00	; 0
 178:	e1 f7       	brne	.-8      	; 0x172 <main+0x3e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x48>
 17c:	00 00       	nop
	_delay_ms(50);// ждём прохода импульса
		
	sei();// разршаеи прерывания
 17e:	78 94       	sei
				PORTD &=(0<<7);
				PORTC |=(1<<0);//включаем правый поворотник
				PORTD |=(1<<6);
				PORTB |=(1<<0);//включаем серву
				_delay_ms(50);
				OCR1A=110;
 180:	0e e6       	ldi	r16, 0x6E	; 110
 182:	10 e0       	ldi	r17, 0x00	; 0
				
				case '9':
				
				PORTB |= (1<<0);
				_delay_ms(50);
				OCR1A=188;
 184:	ec eb       	ldi	r30, 0xBC	; 188
 186:	f0 e0       	ldi	r31, 0x00	; 0
				PORTD &=(0<<6);
				PORTC |=(1<<1);//включаем левый поворотник
				PORTD |=(1<<7);
				PORTB |=(1<<0);//включаем серву
				_delay_ms(50);
				OCR1A=236;
 188:	cc ee       	ldi	r28, 0xEC	; 236
 18a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
		
		}
		
		bufFirst = (bufFirst + 1)%bufSize;// сдвигаем указатель буфера
 18c:	24 e6       	ldi	r18, 0x64	; 100
 18e:	30 e0       	ldi	r19, 0x00	; 0
	// бесконечный цикл
	while(1) 
	{
		
	
	if(bufLast != bufFirst)//выполн¤ем действие только в том случае, если буфер не пуст
 190:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <bufLast>
 194:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bufFirst>
 198:	98 17       	cp	r25, r24
 19a:	d1 f3       	breq	.-12     	; 0x190 <main+0x5c>
	{
		if(lastValue != bufer[bufFirst]){
 19c:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <bufFirst>
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	ab 59       	subi	r26, 0x9B	; 155
 1a4:	bf 4f       	sbci	r27, 0xFF	; 255
 1a6:	9c 91       	ld	r25, X
 1a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1ac:	98 17       	cp	r25, r24
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <main+0x7e>
 1b0:	e0 c0       	rjmp	.+448    	; 0x372 <main+0x23e>
			lastValue = bufer[bufFirst];
 1b2:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <bufFirst>
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	ab 59       	subi	r26, 0x9B	; 155
 1ba:	bf 4f       	sbci	r27, 0xFF	; 255
 1bc:	8c 91       	ld	r24, X
 1be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			
			switch(blockRul)
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1c6:	80 33       	cpi	r24, 0x30	; 48
 1c8:	21 f0       	breq	.+8      	; 0x1d2 <main+0x9e>
 1ca:	81 33       	cpi	r24, 0x31	; 49
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <main+0x9c>
 1ce:	97 c0       	rjmp	.+302    	; 0x2fe <main+0x1ca>
 1d0:	d0 c0       	rjmp	.+416    	; 0x372 <main+0x23e>
			{
				
				//нет блокировки
			case '0':
			switch(bufer[bufFirst])
 1d2:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <bufFirst>
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
 1d8:	ab 59       	subi	r26, 0x9B	; 155
 1da:	bf 4f       	sbci	r27, 0xFF	; 255
 1dc:	9c 91       	ld	r25, X
 1de:	96 33       	cpi	r25, 0x36	; 54
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <main+0xb0>
 1e2:	5c c0       	rjmp	.+184    	; 0x29c <main+0x168>
 1e4:	18 f4       	brcc	.+6      	; 0x1ec <main+0xb8>
 1e6:	94 33       	cpi	r25, 0x34	; 52
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <main+0xc4>
 1ea:	c3 c0       	rjmp	.+390    	; 0x372 <main+0x23e>
 1ec:	97 33       	cpi	r25, 0x37	; 55
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0xbe>
 1f0:	7e c0       	rjmp	.+252    	; 0x2ee <main+0x1ba>
 1f2:	99 33       	cpi	r25, 0x39	; 57
 1f4:	51 f1       	breq	.+84     	; 0x24a <main+0x116>
 1f6:	bd c0       	rjmp	.+378    	; 0x372 <main+0x23e>
			{
				case '4':
		     	//поворот влево
				PORTC &=(0<<0);//выключаем  правый навс¤кий
 1f8:	85 b3       	in	r24, 0x15	; 21
 1fa:	15 ba       	out	0x15, r1	; 21
				PORTD &=(0<<6);
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	12 ba       	out	0x12, r1	; 18
				PORTC |=(1<<1);//включаем левый поворотник
 200:	a9 9a       	sbi	0x15, 1	; 21
				PORTD |=(1<<7);
 202:	97 9a       	sbi	0x12, 7	; 18
				PORTB |=(1<<0);//включаем серву
 204:	c0 9a       	sbi	0x18, 0	; 24
 206:	4f e7       	ldi	r20, 0x7F	; 127
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	41 50       	subi	r20, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0xd8>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0xe2>
 216:	00 00       	nop
				_delay_ms(50);
				OCR1A=236;
 218:	db bd       	out	0x2b, r29	; 43
 21a:	ca bd       	out	0x2a, r28	; 42
 21c:	4f ef       	ldi	r20, 0xFF	; 255
 21e:	80 e7       	ldi	r24, 0x70	; 112
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	41 50       	subi	r20, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <main+0xee>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <main+0xf8>
 22c:	00 00       	nop
				_delay_ms(100);// ждЄм, пока серва докрутит
				PORTB &= (0<<0);// выключаем серву
 22e:	88 b3       	in	r24, 0x18	; 24
 230:	18 ba       	out	0x18, r1	; 24
				PORTC |=(1<<1);//включаем левый поворотник
 232:	a9 9a       	sbi	0x15, 1	; 21
				PORTD |=(1<<7);
 234:	97 9a       	sbi	0x12, 7	; 18
 236:	4f e7       	ldi	r20, 0x7F	; 127
 238:	88 e3       	ldi	r24, 0x38	; 56
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	41 50       	subi	r20, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x108>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x112>
 246:	00 00       	nop
 248:	94 c0       	rjmp	.+296    	; 0x372 <main+0x23e>
			
				break;
				
				case '9':
				
				PORTB |= (1<<0);
 24a:	c0 9a       	sbi	0x18, 0	; 24
 24c:	4f e7       	ldi	r20, 0x7F	; 127
 24e:	88 e3       	ldi	r24, 0x38	; 56
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	41 50       	subi	r20, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x11e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x128>
 25c:	00 00       	nop
				_delay_ms(50);
				OCR1A=188;
 25e:	fb bd       	out	0x2b, r31	; 43
 260:	ea bd       	out	0x2a, r30	; 42
 262:	4f ef       	ldi	r20, 0xFF	; 255
 264:	80 e7       	ldi	r24, 0x70	; 112
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	41 50       	subi	r20, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x134>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x13e>
 272:	00 00       	nop
				_delay_ms(100);
				PORTB &= (0<<0);
 274:	88 b3       	in	r24, 0x18	; 24
 276:	18 ba       	out	0x18, r1	; 24
 278:	4f e7       	ldi	r20, 0x7F	; 127
 27a:	88 e3       	ldi	r24, 0x38	; 56
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	41 50       	subi	r20, 0x01	; 1
 280:	80 40       	sbci	r24, 0x00	; 0
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <main+0x14a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x154>
 288:	00 00       	nop
				_delay_ms(50);
				
				
				PORTC &=(0<<0);//выключить поворотник вправо
 28a:	85 b3       	in	r24, 0x15	; 21
 28c:	15 ba       	out	0x15, r1	; 21
				PORTC &=(0<<1);//выключить левый поворотник
 28e:	85 b3       	in	r24, 0x15	; 21
 290:	15 ba       	out	0x15, r1	; 21
				PORTD &=(0<<6);
 292:	82 b3       	in	r24, 0x12	; 18
 294:	12 ba       	out	0x12, r1	; 18
				PORTD &=(0<<7);
 296:	82 b3       	in	r24, 0x12	; 18
 298:	12 ba       	out	0x12, r1	; 18
				break;
 29a:	6b c0       	rjmp	.+214    	; 0x372 <main+0x23e>
				
				case '6':
				
				//поворот вправо
				PORTC &=(0<<1);//выключаем  левый навс¤кий
 29c:	85 b3       	in	r24, 0x15	; 21
 29e:	15 ba       	out	0x15, r1	; 21
				PORTD &=(0<<7);
 2a0:	82 b3       	in	r24, 0x12	; 18
 2a2:	12 ba       	out	0x12, r1	; 18
				PORTC |=(1<<0);//включаем правый поворотник
 2a4:	a8 9a       	sbi	0x15, 0	; 21
				PORTD |=(1<<6);
 2a6:	96 9a       	sbi	0x12, 6	; 18
				PORTB |=(1<<0);//включаем серву
 2a8:	c0 9a       	sbi	0x18, 0	; 24
 2aa:	4f e7       	ldi	r20, 0x7F	; 127
 2ac:	88 e3       	ldi	r24, 0x38	; 56
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	41 50       	subi	r20, 0x01	; 1
 2b2:	80 40       	sbci	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	e1 f7       	brne	.-8      	; 0x2b0 <main+0x17c>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <main+0x186>
 2ba:	00 00       	nop
				_delay_ms(50);
				OCR1A=110;
 2bc:	1b bd       	out	0x2b, r17	; 43
 2be:	0a bd       	out	0x2a, r16	; 42
 2c0:	4f ef       	ldi	r20, 0xFF	; 255
 2c2:	80 e7       	ldi	r24, 0x70	; 112
 2c4:	92 e0       	ldi	r25, 0x02	; 2
 2c6:	41 50       	subi	r20, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x192>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x19c>
 2d0:	00 00       	nop
				_delay_ms(100);// ждЄм, пока серва докрутит
				PORTB &= (0<<0);// выключаем серву
 2d2:	88 b3       	in	r24, 0x18	; 24
 2d4:	18 ba       	out	0x18, r1	; 24
				PORTC |=(1<<0);//включаем правый поворотник
 2d6:	a8 9a       	sbi	0x15, 0	; 21
				PORTD |=(1<<6);
 2d8:	96 9a       	sbi	0x12, 6	; 18
 2da:	4f e7       	ldi	r20, 0x7F	; 127
 2dc:	88 e3       	ldi	r24, 0x38	; 56
 2de:	91 e0       	ldi	r25, 0x01	; 1
 2e0:	41 50       	subi	r20, 0x01	; 1
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	90 40       	sbci	r25, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <main+0x1ac>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0x1b6>
 2ea:	00 00       	nop
 2ec:	42 c0       	rjmp	.+132    	; 0x372 <main+0x23e>
				_delay_ms(50);//ждЄм , пока утихнет скачок
				break;
				
				case '7':
				blockRul = char(int(!(bool(char(blockRul)-48)))+48);
 2ee:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2f2:	90 33       	cpi	r25, 0x30	; 48
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <main+0x1c4>
 2f6:	81 e3       	ldi	r24, 0x31	; 49
 2f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
				break;
 2fc:	3a c0       	rjmp	.+116    	; 0x372 <main+0x23e>
			
			break;
			
			//есть блокировка
			case '1':
			    switch(bufer[bufFirst])
 2fe:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <bufFirst>
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	ab 59       	subi	r26, 0x9B	; 155
 306:	bf 4f       	sbci	r27, 0xFF	; 255
 308:	9c 91       	ld	r25, X
 30a:	97 33       	cpi	r25, 0x37	; 55
 30c:	59 f1       	breq	.+86     	; 0x364 <main+0x230>
 30e:	99 33       	cpi	r25, 0x39	; 57
 310:	81 f5       	brne	.+96     	; 0x372 <main+0x23e>
			    {
						case '9':
						
						PORTB |= (1<<0);
 312:	c0 9a       	sbi	0x18, 0	; 24
 314:	4f e7       	ldi	r20, 0x7F	; 127
 316:	88 e3       	ldi	r24, 0x38	; 56
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	41 50       	subi	r20, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x1e6>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x1f0>
 324:	00 00       	nop
						_delay_ms(50);
						OCR1A=188;
 326:	fb bd       	out	0x2b, r31	; 43
 328:	ea bd       	out	0x2a, r30	; 42
 32a:	4f ef       	ldi	r20, 0xFF	; 255
 32c:	80 e7       	ldi	r24, 0x70	; 112
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	41 50       	subi	r20, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x1fc>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x206>
 33a:	00 00       	nop
						_delay_ms(100);
						PORTB &= (0<<0);
 33c:	88 b3       	in	r24, 0x18	; 24
 33e:	18 ba       	out	0x18, r1	; 24
 340:	4f e7       	ldi	r20, 0x7F	; 127
 342:	88 e3       	ldi	r24, 0x38	; 56
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	41 50       	subi	r20, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x212>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x21c>
 350:	00 00       	nop
						_delay_ms(50);
						
						
						PORTC &=(0<<0);//выключить поворотник вправо
 352:	85 b3       	in	r24, 0x15	; 21
 354:	15 ba       	out	0x15, r1	; 21
						PORTC &=(0<<1);//выключить левый поворотник
 356:	85 b3       	in	r24, 0x15	; 21
 358:	15 ba       	out	0x15, r1	; 21
						PORTD &=(0<<6);
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	12 ba       	out	0x12, r1	; 18
						PORTD &=(0<<7);
 35e:	82 b3       	in	r24, 0x12	; 18
 360:	12 ba       	out	0x12, r1	; 18
						break;
 362:	07 c0       	rjmp	.+14     	; 0x372 <main+0x23e>
						
					case '7':
					blockRul =char(int(!(bool(char(blockRul)-48)))+48);// (blockRul++)%2;
 364:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 368:	90 33       	cpi	r25, 0x30	; 48
 36a:	09 f0       	breq	.+2      	; 0x36e <main+0x23a>
 36c:	80 e3       	ldi	r24, 0x30	; 48
 36e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
			break;
		}
		
		}
		
		bufFirst = (bufFirst + 1)%bufSize;// сдвигаем указатель буфера
 372:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <bufFirst>
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	b9 01       	movw	r22, r18
 37c:	03 d0       	rcall	.+6      	; 0x384 <__divmodhi4>
 37e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <bufFirst>
 382:	06 cf       	rjmp	.-500    	; 0x190 <main+0x5c>

00000384 <__divmodhi4>:
 384:	97 fb       	bst	r25, 7
 386:	07 2e       	mov	r0, r23
 388:	16 f4       	brtc	.+4      	; 0x38e <__divmodhi4+0xa>
 38a:	00 94       	com	r0
 38c:	06 d0       	rcall	.+12     	; 0x39a <__divmodhi4_neg1>
 38e:	77 fd       	sbrc	r23, 7
 390:	08 d0       	rcall	.+16     	; 0x3a2 <__divmodhi4_neg2>
 392:	0b d0       	rcall	.+22     	; 0x3aa <__udivmodhi4>
 394:	07 fc       	sbrc	r0, 7
 396:	05 d0       	rcall	.+10     	; 0x3a2 <__divmodhi4_neg2>
 398:	3e f4       	brtc	.+14     	; 0x3a8 <__divmodhi4_exit>

0000039a <__divmodhi4_neg1>:
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	08 95       	ret

000003a2 <__divmodhi4_neg2>:
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255

000003a8 <__divmodhi4_exit>:
 3a8:	08 95       	ret

000003aa <__udivmodhi4>:
 3aa:	aa 1b       	sub	r26, r26
 3ac:	bb 1b       	sub	r27, r27
 3ae:	51 e1       	ldi	r21, 0x11	; 17
 3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <__udivmodhi4_ep>

000003b2 <__udivmodhi4_loop>:
 3b2:	aa 1f       	adc	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	a6 17       	cp	r26, r22
 3b8:	b7 07       	cpc	r27, r23
 3ba:	10 f0       	brcs	.+4      	; 0x3c0 <__udivmodhi4_ep>
 3bc:	a6 1b       	sub	r26, r22
 3be:	b7 0b       	sbc	r27, r23

000003c0 <__udivmodhi4_ep>:
 3c0:	88 1f       	adc	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	5a 95       	dec	r21
 3c6:	a9 f7       	brne	.-22     	; 0x3b2 <__udivmodhi4_loop>
 3c8:	80 95       	com	r24
 3ca:	90 95       	com	r25
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
